import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:myafmzd/models/distribuidor_model.dart';

class DistribuidorService {
  final _coleccion = FirebaseFirestore.instance.collection('distribuidoras');

  Future<List<Distribuidor>> leerDesdeCache() async {
    print('üì¶ ARCHIVOS[CACHE] Leyendo distribuidores desde cach√© local...');
    final query = await _coleccion.get(const GetOptions(source: Source.cache));
    print('üì¶ [CACHE] Le√≠dos ${query.docs.length} distribuidores desde cach√©.');
    return query.docs
        .map((doc) => Distribuidor.fromMap(doc.data(), id: doc.id))
        .toList();
  }

  Future<List<Distribuidor>> leerDesdeServidor() async {
    print('üì° ARCHIVOS[FIREBASE] Leyendo distribuidores desde Firebase...');
    final query = await _coleccion.get(
      const GetOptions(source: Source.serverAndCache),
    );
    print(
      'üì° ARCHIVOS[FIREBASE] Le√≠dos ${query.docs.length} distribuidores desde servidor.',
    );
    return query.docs
        .map((doc) => Distribuidor.fromMap(doc.data(), id: doc.id))
        .toList();
  }

  Future<Distribuidor?> obtenerPorUuid(String uuid) async {
    print('üì° ARCHIVOS[FIREBASE] Buscando distribuidor con UUID $uuid');
    final doc = await _coleccion.doc(uuid).get();
    if (!doc.exists) {
      print('‚ö†Ô∏è ARCHIVOS[FIREBASE] No se encontr√≥ el distribuidor $uuid');
      return null;
    }
    print('üì° ARCHIVOS[FIREBASE] Distribuidor $uuid encontrado.');
    return Distribuidor.fromMap(doc.data()!, id: doc.id);
  }
}
